#!/usr/bin/env python
# encoding: utf8
#
# Seafile Administration Web-To-CLI-Wrapper
# Copyright (C) 2013 Henri Wahl <h.wahl@ifw-dresden.de>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA

USAGE = """
seafadm [option...] [command] [argument]

Valid options are:

    -c, --config      location for config file for URL, username and password
    -U, --url         URL of Seafile server, e.g. https://seafile.local
    -u, --username    username of Seafile admin account
    -p, --password    password for givern username
    -F, --force       disable confirmation for delete and quota command

Valid commands are:

    show              show informations about users, libraries, groups and links
    delete            delete users, libraries, groups and links
    quota             set quota for single users and whole domains
    search            search for users, groups and links
    report            generate report per user to be sent by mail
    check             check for invalid links
    clean             check for invalid links and delete them

Arguments for show command:

    users             show all users, their ID, creation date and quota as list
    user <username>   show extra details about <username>, its libraries, shares and groups
    libs              show all libraries, their ID, owners and description as list
    groups            show all groups, their ID, owner, creation date and members as list
    group <group>     show details about single <group>
    links             show links, their ID, creation date and URL as list ordered by owner
    all               show extra details about all users

Arguments for delete command:

    user <username>   delete <username>
    lib <repo-id>     delete library with ID <repo-id>
    link <link>       delete link <link> identified by URL or ID
    group <group>     delete group identified by group name <group>

Arguments for quota command:

    user <username> <quota>        set quota for <username> to <quota> MB
    domain <domain> <quota>        set quota for users from <domain> to <quota> MB
    domain not <domain> <quota>    set quota for users NOT from <domain> to <quota> MB
    domain min <domain> <quota>    set quota for users from <domain> to a minimum of
                                   <quota> MB

Arguments for search command:

    user <srtring>    search in users for <string>
    group <string>    search in groups for <string>
    link <string>     search in links for <string>

Arguments for report command:

    user <username>   generate report for user <username>, to be sent by mail for example

Arguments for check command:

    links             check validity of links and display them ordered by validity

Arguments for clean command:

    links             check validity of links and delete them if invalid


EXAMPLES:

Showing all users, their libraries, groups and memberships:

    seafadm -c ./seafadm.conf show all

Showing users as list:

    seafadm -c ./seafadm.conf show users

Showing details about one single user:

    seafadm -c ./seafadm.conf show user joe@example.com

Deleting an user:

    seafadm -c ./seafadm.conf delete user joe@example.com

Deleting a library:

    seafadm -c ./seafadm.conf delete lib 1c17cddc-2864-407c-8fcf-6a325964d00b

Setting quota to 10240 MB for an user:

    seafadm -c ./seafadm.conf quota user joe@example.com 10240

Setting quota to 4096 MB for users of domain example.com:

    seafadm -c ./seafadm.conf quota domain example.com 4096

Setting quota to a minimum of 20480 MB for all users of domain example.com:

    seafadm -c ./seafadm.conf quota domain min example.com 20480

Setting quota to 1 MB for all users NOT in domain example.com:

    seafadm -c ./seafadm.conf quota domain not example.com 1

Search for user joe in users:

    seafadm -c ./seafadm.conf search user joe

Generate report for user joe@example.com

    seafadm -c ./seafadm.conf report user joe@example.com

Check validity of links

    seafadm -c ./seafadm.conf check links

Delete invalid links

    seafadm -c ./seafadm.conf clean links
"""

import sys
import getopt
import os.path
import ConfigParser
import json
import requests
import codecs
# less UTF-8-sensible print replacement
out = codecs.getwriter('utf-8')(sys.stdout)

# default config parameters
CONFIG_FILE = SEAFILE_URL = SEAFILE_USERNAME = SEAFILE_PASSWORD = SEAFILE_ADMIN = ""
# items to be shown per page to avoid pagination - 100000 should be enough
PER_PAGE = 100000
# needed for quota calculation
SIZE_UNITS = ["bytes", "kb", "mb", "gb", "tb"]
# no forcing as default
FORCE = False


def write(string):
    # use write method of codecs StreamWriter class
    out.write(string + "\n")


def ErrorExit(message="An error occured.", status=1):
    """
    exit with given error message
    allow prefix, especially for spitting out section of configuration errors
    """
    write("\n" +  message + "\n")
    sys.exit(status)


try:
    import bs4
except:
    ErrorExit("No BeautifulSoup module bs4 found. Please install BeautifulSoup 4")


class User(object):
    """
    store information about a user
    """
    EMail = Creation = Quota = UsedSpace = Libs = Groups = Links = ID = Shares = None

    def __init__(self, **kwds):
        # fill properties with given values
        for k in kwds: self.__dict__[k] = kwds[k]


    def PrintInfo(self):
        """
        pretty prints user details
        """
        write("User:\t%s" % (self.EMail))
        write("ID:\t%s" % (self.ID))
        write("Quota:\t%s" % (("%s/%s MB" % (self.UsedSpace, self.Quota))))
        write("Date:\t%s" % (self.Creation))
        if len(self.Libs) > 0:
            category = "Libs:"
            for l in self.Libs:
                write("%s\t%s" % (category, " | ".join((l.ID, l.Name))))
                category = ""
        if len(self.Groups) > 0:
            category = "Groups:"
            for g in self.Groups:
                if g.Owner == self.EMail:
                    write("%s\t%s %s" % (category, g.Name, "(Owner)"))
                else:
                    write("%s\t%s" % (category, g.Name))
                category = ""
        if len(self.Links) > 0:
            category = "Links:"
            for l in self.Links:
                write("%s\t%s" % (category, " | ".join((l.URL, l.Creation, l.Name))))
                category = ""
        if len(self.Shares) > 0:
            category = "Shares:"
            for s in self.Shares:
                if s.Type == "user":
                    write("%s\t%s by user %s" % (category, s.Name, s.Owner))
                else:
                    write("%s\t%s by group %s" % (category, s.Name, s.Group))
                category = ""


    def PrintReport(self):
        """
        pretty prints user details in HTML
        """
        write("<html><head></head><body>")
        write("<h2>Seafile report for %s</h2>" % (self.EMail))
        write("<p>Registered since: %s</p>" % (self.Creation))
        write("<p>Used space: %s</p>" % (("%s MB of %s MB\n" % (self.UsedSpace, self.Quota))))
        if len(self.Libs) > 0:
            write("<h3>Libraries:</h3>")
            for l in self.Libs:
                write("%s<br>" % (l.Name))
            write("<p>Manage your libraries at <a href=%s/home/my/>%s/home/my/</a></p>" % (SEAFILE_URL, SEAFILE_URL))
        if len(self.Groups) > 0:
            write("<h3>Groups:</h3>")
            for g in self.Groups:
                if g.Owner == self.EMail:
                    write("%s %s<br>" % (g.Name, "(Owner)"))
                else:
                    write("%s<br>" % (g.Name))
            write("<p>Manage your groups at <a href=%s/groups/>%s/groups/</a></p>" % (SEAFILE_URL, SEAFILE_URL))
        if len(self.Links) > 0:
            write("<h3>Links you share:</h3>")
            for l in self.Links:
                write("<a href=%s>%s</a> %s<br>" %(l.URL, l.URL, l.Name))
            print
            write("<p>Manage your links at <a href=%s/share/links/>%s/share/links/</a></p>" % (SEAFILE_URL, SEAFILE_URL))
        if len(self.Shares) > 0:
            write("<h3>Libraries shared with you:</h3>")
            for s in self.Shares:
                if s.Type == "user":
                    write("%s by user %s<br>" % (s.Name, s.Owner))
                else:
                    write("%s by group %s<br>" % (s.Name, s.Group))
            print
            write("<p>Manage your shares at <a href=%s/share/>%s/share/</a></p>" % (SEAFILE_URL, SEAFILE_URL))
        if SEAFILE_ADMIN != "":
            write("<p>If you want to delete your Seafile account at %s please contact <a href=mailto:%s>%s</a>.</p>" % (SEAFILE_URL, SEAFILE_ADMIN, SEAFILE_ADMIN))
        write("</body></html>")


    def CollectInfo(self, libs={}, links={}, groups={}):
        """
        sort user information
        """
        self.Libs = list()
        for l in libs.values():
            if self.EMail == l.Owner:
                self.Libs.append(l)
        self.Libs.sort(cmp=lambda x,y: cmp(x.Name , y.Name))
        self.Groups = list()
        for g in groups.values():
            if self.EMail in g.Members:
                self.Groups.append(g)
        self.Groups.sort(cmp=lambda x,y: cmp(x.Name , y.Name))
        self.Links = list()
        for l in links.values():
            if self.EMail in l.Owner:
                self.Links.append(l)
        self.Links.sort(cmp=lambda x,y: cmp(x.Name , y.Name))
        # get shares given for user
        self.Shares = self.GetShares()
        for g in self.Groups:
            for s in g.GetShares(): self.Shares.append(s)
        return True


    def GetShares(self):
        """
        get shares a user gets from other users
        """
        shares = list()
        for s in GetData("/useradmin/info/%s/" % (self.EMail), section="Shared"):
            share = Share(Name=s[1], Owner=s[2], Description=s[3], Type="user")
            shares.append(share)
        return shares


class Library(object):
    """
    a single library
    """
    Name = ID = Owner = Description = None

    def __init__(self, **kwds):
        # fill properties with given values
        for k in kwds: self.__dict__[k] = kwds[k]


class Link(object):
    """
    publicily available link
    """
    Name = Owner = Creation = Count = Type = URL = ID = Validity = None

    def __init__(self, **kwds):
        # fill properties with given values
        for k in kwds: self.__dict__[k] = kwds[k]

    def PrintInfo(self):
        """
        pretty prints link details
        """
        write("Link:\t%s" % (self.Name))
        write("ID:\t%s" % (self.ID))
        write("Date:\t%s" % (self.Creation))
        write("Owner:\t%s" % (self.Owner))
        write("Type:\t%s" % (self.Type))
        write("URL:\t%s" % (self.URL))


    def IsValid(self):
        """
        check validity of URL
        """
        self.Validity = True
        try:
            # add "/" to avoid HTTP status codes 301 and thus double number of requests
            if not self.URL.endswith("/"):
                self.URL += "/"
            soup = GetSoup(self.URL)
            # text-panel contains error message - if no error then no text-panel div
            for e in soup.find_all(attrs={"class":"text-panel"}):
                # if something found link is invalid
                self.Validity = False
        except requests.exceptions.HTTPError:
            self.Validity = False
        return self.Validity


class Group(object):
    """
    group and its members
    """
    Name = ID = Owner = Creation = Members = Description = None

    def __init__(self, **kwds):
        # fill properties with given values
        for k in kwds: self.__dict__[k] = kwds[k]

    def PrintInfo(self):
        """
        pretty prints group details
        """
        write("Group:\t%s" % (self.Name))
        write("ID:\t%s" % (self.ID))
        write("Date:\t%s" % (self.Creation))
        write("Owner:\t%s" % (self.Owner))
        if len(self.Members) > 0:
            category = "Member:"
            for l in self.Members:
                write("%s\t%s" % (category, l))
                category = ""


    def GetShares(self):
        """
        get shares a group gets from users
        """
        shares = list()
        for s in GetData("/group/%s/" % (self.ID), section="grp-repos"):
            share = Share(Name=s[1], Owner=s[2], Description=s[3], Type="group", Group=self.Name)
            shares.append(share)
        return shares


class Share(object):
    """
    a single share
    """
    Name = Owner = Description = Type = Group = None

    def __init__(self, **kwds):
        # fill properties with given values
        for k in kwds: self.__dict__[k] = kwds[k]


def GetURL(url, data=None):
    """
    shortcut for URL request
    """
    if data != None:
        response = session.post(url, data)
    else:
        response = session.get(url)

    return response.text


def GetAjax(url, data=None, referer=None):
    """
    shortcut for Ajax request
    """
    headers =  dict(session.headers.copy().items())
    headers.update({'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                    'Accept': 'text/plain',
                    'X-Requested-With': 'XMLHttpRequest'})
    if referer != None:
        headers.update({"Referer" : referer})
    response = session.post(url, data=data, headers=headers)
    return response.text


def GetSoup(url, data=None):
    """
    get HTML content as BeautifulSoup object
    """
    return bs4.BeautifulSoup(GetURL(url, data))


def GetData(data_url, mode="simple", section=""):
    """
    get data of given URL, e.g. users, needing desired section of page
    """
    rows = list()
    table = None
    # sub-url as data-url gets anti-pagination-oage-request added
    soup = GetSoup(SEAFILE_URL + data_url + "?per_page=%s" % (PER_PAGE))
    # sections are headed by h3 headers or li list items and thus identifyable
    h3s = soup.find_all("h3")
    for h3 in h3s:
        if h3.string == section:
            table = h3.find_next_sibling("table")
            break
    # some pages show information in tables inside of certain divs which should be named by id
    if table == None:
        div = soup.find(id=section)
        if not div == None:
            try:
                table = div.find_all("table")[0]
            except:
                print table
    if not table == None:
        for tr in table:
            # there are some empty passages in HTML which have no .find_all() method
            if isinstance(tr, bs4.element.Tag):
                columns = list()
                for td in tr.find_all("td"):
                    if td.string != None:
                        if mode == "simple":
                            data = td.string.replace("\n","").strip()
                        elif mode == "verbose":
                            string = td.string.replace("\n","").strip()
                            soup = td
                            data = [string, soup]
                    else:
                        data = td
                    columns.append(data)
                # only add colums that contains any data
                if not len(columns) == 0: rows.append(columns)
    return rows


def GetUsers():
    """
    retrieve information about all users
    """
    users = dict()
    for d in GetData("/sys/useradmin/", section="right-panel"):
        try:
            used_space, quota = d[3].split("/")
            quota = quota.strip()
            quota, unit = quota.split(" ")
            # calculate space in megabytes
            quota = format(float(quota)*1024**SIZE_UNITS.index(unit.lower())/1024**2, ".1f")
        except:
            used_space = d[3]
            quota = "None"
        used_space = used_space.strip()
        used_space, unit = used_space.split(" ")
        # calculate space in megabytes
        used_space = format(float(used_space)*1024**SIZE_UNITS.index(unit.lower())/1024**2, ".1f")
        creation = d[4].contents[0].strip().split("/")[0].strip()
        user = User(EMail=str(d[0].text.strip()), Creation=creation, UsedSpace = used_space, Quota = quota)
        if isinstance(d[5], bs4.element.Tag):
            user.ID=d[5].a["data-url"].strip("/").split("/")[-1]
        users[user.EMail] = (user)
    return users


def GetLibraries():
    """
    retrieve information about all libraries
    """
    libraries = dict()
    for d in GetData("/sys/seafadmin/", section="right-panel"):
        library = Library(Name=d[0], ID=d[1], Owner=d[2].a.string,
                          Description=d[3].replace("\n", " ").replace("\r", " ").strip())
        libraries[library.ID]=library
    return libraries


def GetLinks():
    """
    get all publicly shared links
    Name = Owner = Creation = Count = URL = None
    """
    links = dict()
    # now verbose mode with bs4 Tags necessary for URL
    for d in GetData("/sys/publinkadmin/", section="right-panel", mode="verbose"):
        link = Link(Name=d[0][0], Owner=d[1][0], Creation=d[2][0], Count=d[3][0])
        if link.Name.startswith("/"):
            link.Type = "directory"
        else:
            link.Type = "file"
        if isinstance(d[4][1], bs4.element.Tag):
            link.ID = d[4][1].a["href"].split("=")[-1]
            link.URL = "/".join((SEAFILE_URL, link.Type[0], link.ID))
        links[link.ID] = link
    return links


def GetGroups():
    """
    get groups and their members
    """
    groups = dict()
    for d in GetData("/sys/groupadmin/", mode="verbose", section="right-panel"):
        group = Group(Name=d[0][0], Owner=d[1][0], Creation=d[2][0])
        group.ID = d[0][1].a["href"].strip("/").split("/")[-1]
        soup = GetSoup(SEAFILE_URL + "/group/" + group.ID + "/members/")
        group.Members = list()
        for u in soup.find_all("ul", attrs={"class": "user-list"}):
            for p in u.find_all("p"):
                group.Members.append(p.string)
            group.Members.sort()
        groups[group.Name] = group
    return groups


def Confirm(question):
    """
    return true or false for confirmation of certain destructive tasks
    """
    if FORCE == True:
        return True
    elif raw_input(question + "? [y/n]: ").lower() in ["y", "yes"]:
        return True
    else:
        return False


# get configuration
try:
    opts, args = getopt.gnu_getopt(sys.argv[1:], "a:c:u:p:U:Ff", ["admin=", "config=", "username=", "password=", "url=", "force"])
    for opt, arg in opts:
        if opt in ("-a", "--admin"):
            SEAFILE_ADMIN = arg
        if opt in ("-c", "--config"):
            CONFIG_FILE = arg
        if opt in ("-u", "--username"):
            SEAFILE_USERNAME = arg
        if opt in ("-p", "--password"):
            SEAFILE_PASSWORD = arg
        if opt in ("-U", "--url"):
            SEAFILE_URL = arg
        if opt in ("-F", "--force"):
            FORCE = True
except:
    ErrorExit(USAGE)


if not CONFIG_FILE == "":
    if os.path.exists(CONFIG_FILE):
        if not (os.path.isfile(CONFIG_FILE) or \
                    os.path.islink(CONFIG_FILE)):
            ErrorExit("Configuration file %s is no file or link." % (CONFIG_FILE))
    else:
        ErrorExit("Configuration file %s does not exist." % (CONFIG_FILE))

if not CONFIG_FILE == "":
    # instantiate Configparser
    config = ConfigParser.ConfigParser()
    config.read(CONFIG_FILE)
    if config.has_section("seafadm"):
        if config.has_option("seafadm", "url") and SEAFILE_URL == "":
            SEAFILE_URL = config.get("seafadm", "url")
        if config.has_option("seafadm", "username") and SEAFILE_USERNAME == "":
            SEAFILE_USERNAME = config.get("seafadm", "username")
        if config.has_option("seafadm", "password") and SEAFILE_PASSWORD == "":
            SEAFILE_PASSWORD = config.get("seafadm", "password")
        if config.has_option("seafadm", "admin") and SEAFILE_ADMIN == "":
            SEAFILE_ADMIN = config.get("seafadm", "admin")
    else:
        ErrorExit("Section [seafadm] is missing in config file %s." % CONFIG_FILE)

# only continue if all needed parameters are configured
if not ( SEAFILE_URL != "" and SEAFILE_USERNAME != "" and SEAFILE_PASSWORD != "" ) :
    ErrorExit("Something is missing. Please provide URL, username and password of Seafile server.")

# new session with cookies and so on
session = requests.Session()
# do not verify SSL/TLS cerificate
session.verify = False
# extra headers
session.headers.update({"User-Agent": "Mozilla/5.0", "Referer": SEAFILE_URL})
# get cookies
session.get(SEAFILE_URL + "/accounts/login/")
# add X-CSRFToken to requests
session.headers.update({"X-CSRFToken": session.cookies["csrftoken"]})

# get URL parts for form field "next"
next_url = list()
for i in SEAFILE_URL.split("://")[1].split("/"):
    if len(i)!=0:
        next_url.append(i)
# kick out fqdn
next_url.pop(0)
next_url.extend(("home", "my"))
next_url = "/" + "/".join(next_url)

data = {"username": SEAFILE_USERNAME,
        "password": SEAFILE_PASSWORD,
        "csrfmiddlewaretoken": session.cookies["csrftoken"],\
        "next": next_url,\
        "submit": "Submit",\
        "remember_me": "off"}

# effectively login
session.post(SEAFILE_URL + "/accounts/login/", data)

# check args for seafadm
if len(args) > 0:
    # when only 1 arg is given args is a tring no list?
    if args[0].lower() in ["list", "show"]:
         # show everything
        if len(args) >= 2:
            objects = args[1].lower()
            if objects == "users":
                users = GetUsers()
                for u in sorted(users.values(), cmp=lambda x, y: cmp(x.EMail, y.EMail)):
                    write("|".join((u.EMail, str(u.ID), u.Creation, "%s/%s MB" % (u.UsedSpace, u.Quota))))
            elif objects in ["repos", "libs", "libraries"]:
                libs = GetLibraries()
                for l in sorted(libs.values(), cmp=lambda x,y: cmp((x.Owner, x.Name), (y.Owner, y.Name))):
                    write("|".join((l.ID, l.Owner, l.Name, l.Description)))
            elif objects == "links":
                links = GetLinks()
                for l in sorted(links.values(), cmp=lambda x,y: cmp((x.Owner, x.Name) , (y.Owner, y.Name))):
                    write("|".join((l.Owner,l.Creation, l.URL, l.Count, l.Name)))
            elif objects == "groups":
                groups = GetGroups()
                for g in sorted(groups.values(), cmp=lambda x,y: cmp(x.Name , y.Name)):
                    write("|".join((g.Name, g.ID, g.Owner, g.Creation, " ".join((g.Members)))))
            elif objects =="user":
                if len(args) >= 3:
                    user = args[2]
                    users = GetUsers()
                    if not user in users.keys():
                        ErrorExit("User %s does not exist." % (user))
                    libs = GetLibraries()
                    links = GetLinks()
                    groups = GetGroups()
                    users[user].CollectInfo(libs=libs, links=links, groups=groups)
                    users[user].PrintInfo()
                else:
                    ErrorExit("User needed to display user info.")
            elif objects =="group":
                if len(args) >= 3:
                    group = args[2]
                    groups = GetGroups()
                    if not group in groups:
                        ErrorExit("Group %s does not exist." % (group))
                    groups[group].PrintInfo()
                else:
                    ErrorExit("Group needed to display group info.")
            elif objects == "all":
                users = GetUsers()
                libs = GetLibraries()
                links = GetLinks()
                groups = GetGroups()
                for u in sorted(users.values(), cmp=lambda x, y: cmp(x.EMail, y.EMail)):
                    u.CollectInfo(libs=libs, links=links, groups=groups)
                    u.PrintInfo()
                    print
            else:
                ErrorExit(USAGE)
        else:
            ErrorExit(USAGE)

    elif args[0].lower() == "delete":
        # user, group, link or repo
        if len(args) >= 3:
            if args[1].lower() in ["user", "library", "lib", "repo", "link", "group", "clean"]:
                objects = args[1].lower()
                if objects == "user":
                    user = args[2]
                    users = GetUsers()
                    if user in users:
                        if Confirm("Delete user %s" % (user)):
                            user = users[user]
                            GetURL("%s/useradmin/remove/%s/" % (SEAFILE_URL, user.ID))
                            write("User %s deleted." % (user.EMail))
                    else:
                        ErrorExit("User %s does not exist." % (user))
                elif objects in ["library", "lib", "repo"]:
                    lib = args[2]
                    libs = GetLibraries()
                    if lib in libs:
                        if Confirm("Delete library %s" % (lib)):
                            GetAjax("%s/ajax/repo/%s/remove/" % (SEAFILE_URL, lib))
                            write("Library %s deleted." % (lib))
                    else:
                         ErrorExit("Library %s does not exist." % (lib))
                elif objects == "link":
                    link = args[2]
                    links = GetLinks()
                    if link.startswith("http"):
                        # reduce to ID
                        link = link.split("/")[-1]
                    if link in links:
                        if Confirm("Delete link %s" % (link)):
                            GetURL("%s/share/link/remove/?t=%s" % (SEAFILE_URL, link))
                            write("Link %s deleted." % (link))
                    else:
                        ErrorExit("Link %s does not exist." % (link))
                elif objects == "group":
                    group = args[2]
                    groups = GetGroups()
                    if group in groups:
                        if Confirm("Delete group %s" % (group)):
                            GetURL("%s/group/%s/remove" % (SEAFILE_URL, groups[group].ID))
                            write("Group %s deleted." % (group))
                    else:
                        ErrorExit("Group %s does not exist." % (group))
            else:
                ErrorExit(USAGE)
        else:
            ErrorExit(USAGE)

    elif args[0].lower() == "quota":
        # domain or user
        if len(args) >= 4:
            if args[1].lower() in ["user", "domain"]:
                objects = args[1].lower()
                if objects == "user":
                    user = args[2]
                    users = GetUsers()
                    if user in users:
                        quota = args[3]
                        if Confirm("Set quota for user %s to %s MB" % (user, quota)):
                            user = users[user]
                            # check validity of given size
                            try: int(quota)
                            except: ErrorExit("%s is no valid quota size." % (quota))
                            write("Set quota for %s to %s MB." %(user.EMail, quota))
                            GetAjax("%s/useradmin/%s/set_quota/" % (SEAFILE_URL, user.EMail),
                                    data={'email': user.EMail, 'quota': quota},
                                    referer="%s/useradmin/info/%s/" % (SEAFILE_URL, user.EMail))
                    else:
                        ErrorExit("User %s does not exist." % (user))
                elif objects == "domain":
                    mode = "normal"
                    if args[2].lower() == "not" and len(args) >= 5:
                        domains = args[3:-1]
                        mode = "reverse"
                    elif args[2].lower() == "min" and len(args) >= 5:
                        domains = args[3:-1]
                        mode = "min"
                    else:
                        domains = args[2:-1]
                    quota = args[-1]
                    # check validity of given size
                    try: int(quota)
                    except: ErrorExit("%s is no valid quota size." % (quota))
                    users = GetUsers()
                    users_mod = list()
                    for user in users.values():
                        if mode == "normal":
                            if user.EMail.split("@")[1] in domains:
                                users_mod.append(user)
                        elif mode == "min":
                            if user.EMail.split("@")[1] in domains and int(quota) > int(user.Quota):
                                users_mod.append(user)
                        else:
                            if not user.EMail.split("@")[1] in domains:
                                users_mod.append(user)
                    if len(users_mod) > 0:
                        question = {"normal": "Set quota for all users from %s to %s MB" % (", ".join(domains), quota),\
                                    "min": "Set quota for all users from %s to MINIMAL %s MB" % (", ".join(domains), quota),\
                                    "reverse": "Set quota for all users NOT from %s to %s MB" % (", ".join(domains), quota)}
                        if Confirm(question[mode]):
                            for user in users_mod:
                                write("Set quota for %s to %s MB." %(user.EMail, quota))
                                GetAjax("%s/useradmin/%s/set_quota/" % (SEAFILE_URL, user.EMail),
                                    data={'email': user.EMail, 'quota': quota},
                                    referer="%s/useradmin/info/%s/" % (SEAFILE_URL, user.EMail))
            else:
                ErrorExit(USAGE)
        else:
            ErrorExit(USAGE)

    elif args[0].lower() == "search":
        # search user, link or group
        if len(args) >= 3:
            if args[1].lower() in ["user", "group", "link"]:
                search = args[2].lower()
                if args[1].lower() == "user":
                    users = GetUsers()
                    links = GetLinks()
                    groups = GetGroups()
                    libs = GetLibraries()
                    for user in users.values():
                        if search in user.EMail.lower():
                            user.CollectInfo(libs=libs, links=links, groups=groups)
                            user.PrintInfo()
                            print
                elif args[1].lower() == "group":
                    groups = GetGroups()
                    for group in groups.values():
                        if search in group.Name.lower():
                            group.PrintInfo()
                            print
                elif args[1].lower() == "link":
                    links = GetLinks()
                    for link in links.values():
                        if search in link.Name.lower() or\
                           search in link.URL:
                            link.PrintInfo()
                            print
            else:
                ErrorExit(USAGE)
        else:
            ErrorExit(USAGE)

    elif args[0].lower() == "check":
        # link and user
        if len(args) >= 2:
            if args[1].lower() in ["link", "links"]:
                objects = args[1].lower()
                if objects == "link" and len(args)>=2:
                    pass

                if objects == "links":
                    invalid_links = list()
                    valid_links = list()
                    links = GetLinks()

                    for l in links.values():
                        if not l.IsValid():
                            invalid_links.append(l)
                        else:
                            valid_links.append(l)
                    for v in sorted(valid_links, cmp=lambda x,y: cmp((x.Owner, x.Name), (y.Owner, y.Name))):
                        write("|".join(("VALID", v.URL, v.Owner, v.Name)))
                    for i in sorted(invalid_links, cmp=lambda x,y: cmp((x.Owner, x.Name), (y.Owner, y.Name))):
                        write("|".join(("INVALID", i.URL, i.Owner, i.Name)))
            else:
                ErrorExit(USAGE)
        else:
            ErrorExit(USAGE)

    elif args[0].lower() == "clean":
        # link and user
        if len(args) >= 2:
            if args[1].lower() == "links":
                objects = args[1].lower()
                if objects == "links":
                    invalid_links = list()
                    links = GetLinks()
                    for l in links.values():
                        if not l.IsValid():
                            invalid_links.append(l)
                    for i in invalid_links:
                        write("Deleting invalid link %s|%s|%s." % (i.URL, i.Owner, i.Name))
                        GetURL("%s/share/link/remove/?t=%s" % (SEAFILE_URL, i.ID))
            else:
                ErrorExit(USAGE)
        else:
            ErrorExit(USAGE)

    elif args[0].lower() == "report":
        # link and user
        if len(args) >= 3:
            if args[1].lower() in ["user"]:
                user = args[2]
                users = GetUsers()
                if not user in users:
                    ErrorExit("User %s does not exist." % (user))
                libs = GetLibraries()
                links = GetLinks()
                groups = GetGroups()
                users[user].CollectInfo(libs=libs, links=links, groups=groups)
                users[user].PrintReport()
        else:
            ErrorExit(USAGE)
else:
    write("\n%s\n" % (USAGE))

# log out finally to keep number of open sessions small
GetURL(SEAFILE_URL + "/accounts/logout/")

